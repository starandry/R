https://git-scm.com/book/ru/v1/
https://toster.ru/q/176843

git clone https://github.com/starandry/R.git

cd f:/R
cd f:/Activation
cd f:/First-C-
git pull     //получает данные и  сливает  их
git commit -a -m "1"    //комит вместе с индексацией 
git add .
git status
git push -u origin master  //отправляет данные и также сливает их
git push -u origin1 master
git push -u origin2 master

Git для новичков:

git config --global user.name "Andrew Starosek"
git config --global user.email "starandry83@mail.ru"
git config --list
git help commit  //$ git help <команда>

создание git-репозитрия:
Git Bash
импорт в git существующий каталог
cd f:/R
git init   //инициализация репозитория, создаёт в текущем каталоге новый подкаталог с именем .git  
git status //позволЯет увидеть  в каком статусе находится репозиторий
git add .  //git add Tester.txt  - происходит точная индексация состояния файла

// если  выполнить  commit, то файл  попадет в commit в том состояни, когда он находился в то  времЯ когда в последний раз  выполнЯлась  команда git add .  //git add Tester.txt 
сам по себе commit - это  снимок состояния проиндексированных  файлов в рабочей дирректории; помещает их в каталог git-а на постоянное хранение.  
Т.о. после изменения файла нужно снова выполнить git add .  //git add Tester.txt  , чтобы проиндексировать  последнюю  версию  файла.

git commit -m "First commit"

Удалённый репозиторий github.com

git remote add origin https://github.com/starandry/R.git  //Определяется удалённый репозиторий с именем origin

git remote add origin1 https://github.com/starandry/Activation.git

git remote add origin2 https://github.com/starandry/First-C-.git

git push -u origin1 master 

git push -u origin master    //подключение к github; он спросит имя, пароль. Репозиторий First залит на удалённый сервер.

//jquery - библиотека
git clone https://github.com/jquery/jquery.git  //начало  клонирования

//Для заливки изменений куда-то с github нужен URL репозитория с github
// cd f:/Git/GitOrigin/FirstRepository
git clone https://github.com/starandry/R.git  //клонирование

git diff //что  изменилось  без  индексирования
git diff --staged  //посмотреть, что  проиндексировано  и  что  войдёт  в следующий комит, показываются только  новые проиндексированные изменения; то что  раньше индексировалось не тронется

git commit -a -m "added new benchmarks" //комитить можно без  индексации с добавлением -a

git rm <имЯ файла  с расширением>  //удаление файла из наблюдения, т.е. из  индексации и она также удалит  его  из  каталога, с параметром -f удаляются проиндесированные файлы
если просто удалить файл из своего рабочего каталога, он будет показан в секции “Changes not staged for commit” (“Изменённые но не обновлённые” — читай не проиндексированные) вывода команды git status

git rm --cached readme.txt  //удаление файла из  индекса, оставив его  в каталоге

git mv <файл1> <файл2>  //переименование файлов

git log  //просмотр истории  комитов, имеет множество  параметров, одни  из  них  -р показывает дельту (разницу/diff), привнесенную каждым коммитом; -2, что ограничит вывод до 2-х последних записей

gitk  //визуализация истории графически 

git commit --amend //изменение последнего  комита

git checkout -- <file>  //отмена изменений файла

git fetch [имя удал. сервера]  //получение данных (веток) из  удалённого проекта, не сливает  с собственными  наработками.

git pull  //получает данные и сливает  их

git push [удал. сервер] [ветка]  //отправка своих  наработок

git remote  //просмотр всех  удалённых  серверов

git remote show [удал. сервер]  //получение информации  об  удалённом сервере

git remote rename [удал. сервер1] [удал. сервер2]  //переименование удалённых  репозиториев

git remote rm [удал. сервер]   //удаление ссылки на удалённый репозиторий

git tag  //просмотр  всех  меток

git tag -a  //создание аннотированной метки, пример, $ git tag -a v1.4 -m 'my version 1.4'
пример создания подписанной метки $ git tag -s v1.5 -m 'my signed 1.5 tag'
пример создания легковесной метки $ git tag v1.4-lw

git tag -v [имя метки]  //верификация метки

git push origin [имя метки]  //отправление метки  на удалённый сервер
или git push origin --tags  //отправляются всех меток на удалённый сервер, которых  нет  на нём.

Примеры создания пседонимовдля команд:
git config --global alias.br branch
git config --global alias.ci commit

git branch <Имя ветки>  //создание новой ветки
git branch -d <Имя ветки>  //удаление ветки
git branch -D <Имя ветки>  //УДАЛЕНИЕ ВЕТКИ СО ВСЕМИ  НАРАБОТКАМИ 
git checkout <Имя ветки>  //переход  на новую  ветку, ДЕЛАЕТСЯ ОТКАТ/ПЕРЕХОД ФАЙЛОВ К УКАЗАТЕЛЮ ЭТОЙ ВЕТКИ.
git checkout -b <Имя ветки>  //создать ветку и  сразу же на неё перейти
git checkout <хеш комита(начальные или последние  символы)>  //переключение на другой комит
git merge <Имя ветки>  //слияние веток

git branch  //список веток
git branch -v  //просмотр последнего  комита на ветке (на кот. нахожусь)

Не перемещайте коммиты, которые вы уже отправили в публичный репозиторий!!!